
def fetch_summary_by_name(connection, name):
    """
    Fetch the summary for a given 'name' from the 'concept' table.
    """

    try:
        cursor = connection.cursor()
        cursor.execute("SELECT summary FROM concept WHERE name = %s;", (name,))
        summary = cursor.fetchone()
        return summary[0] if summary else None
    except Exception as e:
        print(f"Error fetching summary for concept '{name}': {e}")
        return None
    finally:
        cursor.close()

def fetch_concepts_for_collection(connection, collection_id):
    """
    Fetch the concepts associated with a specific module (collection_id).
    """
    try:
        cursor = connection.cursor()
        cursor.execute(
            "SELECT concept_name FROM concept_to_collection WHERE collection_id = %s;",
            (collection_id,)
        )
        concepts = cursor.fetchall()
        return [concept[0] for concept in concepts]
    except Exception as e:
        print(f"Error fetching concepts for collection ID '{collection_id}': {e}")
        return []
    finally:
        cursor.close()

def fetch_prerequisites(connection, concept_name):
    """
    Fetch the prerequisite concepts for a given concept.
    """
    try:
        cursor = connection.cursor()
        cursor.execute(
            "SELECT prereq_name FROM concept_to_concept WHERE concept_name = %s;",
            (concept_name,)
        )
        prerequisites = cursor.fetchall()
        return [prerequisite[0] for prerequisite in prerequisites]
    except Exception as e:
        print(f"Error fetching prerequisites for concept '{concept_name}': {e}")
        return []
    finally:
        cursor.close()

async def prepare_input_for_llm(connection, label):
    """
    Prepare input for the LLM by gathering summaries of concepts and their prerequisites.
    """
    try:
        # Step 1: Get collection ID from label
        cursor = connection.cursor()
        cursor.execute("SELECT id FROM concept_collection WHERE label = %s;", (label,))
        collection_id = cursor.fetchone()
        if not collection_id:
            return f"No collection found for label '{label}'."
        collection_id = collection_id[0]

        # Step 2: Fetch concepts for the collection
        concepts = fetch_concepts_for_collection(connection, collection_id)
        if not concepts:
            return "No concepts found for the collection."

        llm_input = []
        for concept in concepts:
            # Step 3: Fetch summary for each concept
            summary = fetch_summary_by_name(connection, concept)
            if summary:
                llm_input.append(f"Concept: {concept} - {summary}")

            # Step 4: Fetch prerequisites and their summaries
            prerequisites = fetch_prerequisites(connection, concept)
            for prerequisite in prerequisites:
                pre_summary = fetch_summary_by_name(connection, prerequisite)
                if pre_summary:
                    llm_input.append(f"Prerequisite: {prerequisite} - {pre_summary}")

        return "\n".join(llm_input)
    except Exception as e:
        print(f"Error preparing input for LLM: {e}")
        return "Error preparing LLM input."
    finally:
        cursor.close()

def update_module_summary(connection, label, llm_response):
    """
    Update the 'content_summary' column in the 'concept_collection' table
    for the corresponding module (identified by label) with the LLM response.

    Parameters:
        connection: A psycopg2 connection object.
        label (str): The label (module) for which to update the summary.
        llm_response (str): The response generated by the LLM to be stored as the summary.

    Returns:
        str: A success or failure message.
    """
    try:
        cursor = connection.cursor()

        # Fetch the collection_id for the given label
        cursor.execute("SELECT id FROM concept_collection WHERE label = %s;", (label,))
        collection_id = cursor.fetchone()
        
        if not collection_id:
            return f"No module found with label '{label}'."
        
        collection_id = collection_id[0]  # Extract collection_id from the tuple

        # Update the content_summary for the corresponding module
        cursor.execute(
            "UPDATE concept_collection SET content_summary = %s WHERE id = %s;",
            (llm_response, collection_id)
        )
        connection.commit()  # Commit the transaction to save the changes
        
        return f"Successfully updated content_summary for module '{label}'."
    
    except Exception as e:
        print(f"Error while updating content_summary for label '{label}': {e}")
        connection.rollback()  # Rollback the transaction in case of an error
        return f"Error updating content_summary for label '{label}'."
    finally:
        cursor.close()

def llm_input(label,connection):
    if connection:
        try:
            llm_input = prepare_input_for_llm(connection, label)
            return llm_input
        except Exception as e:
            print(f"Error during execution: {e}")
        finally:
            print("Database connection closed.")
